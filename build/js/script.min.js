!function(){const e=document.querySelector(".header__placeholder"),t=document.querySelector(".header__search");if(!t)return;const n=()=>{e.classList.contains("hide"),e.classList.add("hide")};t.value&&n(),t.addEventListener("blur",()=>{t.value?n():(e.classList.contains("hide"),e.classList.remove("hide"))})}(),function(){const e=document.querySelectorAll(".model__link");if(!e[0])return;e.forEach(e=>{e.addEventListener("mousedown",t=>{let n=!1;const o=()=>{n=!0},s=t=>{n&&t.preventDefault(),n=!1,e.removeEventListener("mousemove",o),e.removeEventListener("mouseup",s)};e.addEventListener("mousemove",o),e.addEventListener("mouseup",s)}),e.addEventListener("toushstart",t=>{let n=!1;const o=()=>{n=!0},s=t=>{n&&t.preventDefault(),n=!1,e.removeEventListener("touchmove",o),e.removeEventListener("touchend",s)};e.addEventListener("touchmove",o),e.addEventListener("touchend",s)})}),new Swiper(".model__image-container",{pagination:{el:".model__pagination",type:"bullets",clickable:!0},loop:!0})}(),function(){const e=document.querySelectorAll(".device__model-item"),t=document.querySelectorAll(".device__wire-popup-mobile"),n=document.querySelectorAll(".device__wire-popup-close"),o=document.querySelector(".device__wire-popup-overlay");if(!e[0])return;e.forEach((e,n)=>{e.addEventListener("click",s=>{e.querySelector(".device__model-not-supported")||s.target.classList.contains("device__wire-popup-close")||(t[n].classList.add("js--show"),o.classList.add("js--show"))})}),n.forEach((e,n)=>{e.addEventListener("click",()=>{t[n].classList.remove("js--show"),o.classList.remove("js--show")})}),o.addEventListener("click",()=>{t.forEach(e=>{e.classList.contains("js--show")&&e.classList.remove("js--show")}),o.classList.remove("js--show")})}(),document.getElementById("animation")&&lottie.loadAnimation({container:document.getElementById("animation"),renderer:"svg",loop:!0,autoplay:!0,path:"data.json"}),function(){var e="https://split.daichicloud.ru/brands/all",t="GET",n=200,o=300,s=function(e,t){var s=new XMLHttpRequest;return s.timeout=1e4,s.responseType="json",s.addEventListener("load",(function(){!function(e){return e.status<n||e.status>o}(s)?e(s.response):t("Данные не загрузились. Причина: "+s.status+" "+s.statusText)})),s.addEventListener("error",(function(){t("Произошла ошибка соединения")})),s.addEventListener("timeout",(function(){t("Запрос не успел выполниться за "+s.timeout+"мс")})),s},r=function(e){e.remove()},a=function(e){var t=document.createElement("div");t.style="z-index: 100; margin: 0 auto; text-align: center; background-color: red;",t.style.position="absolute",t.style.left=0,t.style.right=0,t.style.fontSize="30px",t.textContent=e,document.body.insertAdjacentElement("afterbegin",t),window.setTimeout(r,2e3,t)};window.backend={load:function(n,o){var r=s(n,o||a);r.open(t,e),r.send()}}}(),jQuery,function(){const e=document.querySelector(".model-choice__brand-list"),t=document.querySelector(".model-choice__brand-choice");if(!e)return;t.addEventListener("click",()=>{if(!e.classList.contains("show"))return e.classList.add("show"),void t.classList.add("opened");e.classList.contains("show")&&(e.classList.remove("show"),t.classList.remove("opened"))}),document.addEventListener("mousedown",n=>{let o=n.target;o.classList.contains("model-choice__brand-choice")||o.classList.contains("model-choice__brand-item")||o.classList.contains("model-choice__brand-list")||!e.classList.contains("show")||(e.classList.remove("show"),t.classList.remove("opened"))})}(),function(){const e=document.querySelector(".equipment__wrapper"),t=document.querySelector(".equipment__container");if(!e)return;(()=>{let n=document.createDocumentFragment(),o=e.cloneNode(!0);o.className="equipment__slide-wrapper",o.classList.add("swiper-wrapper");let s=document.createElement("div");s.classList.add("equipment__pagination"),s.classList.add("swiper-pagination"),n.appendChild(o),n.appendChild(s),t.appendChild(n),t.querySelectorAll(".equipment__item").forEach(e=>{e.classList.add("swiper-slide")}),new Swiper(".equipment__container",{pagination:{el:".equipment__pagination",type:"bullets"},loop:!0})})()}(),function(){const e=document.querySelector(".process__wrapper"),t=document.querySelector(".process__container");if(!e)return;(()=>{let n=document.createDocumentFragment(),o=e.cloneNode(!0);o.className="process__slide-wrapper",o.classList.add("swiper-wrapper");let s=document.createElement("div");s.classList.add("process__pagination"),s.classList.add("swiper-pagination");let r=document.createElement("div");r.className="process__number",r.textContent=1,n.appendChild(o),n.appendChild(s),n.appendChild(r),t.appendChild(n),t.querySelectorAll(".process__item").forEach(e=>{e.classList.add("swiper-slide")});(e=>{const n=t.querySelector(".process__number");e.on("slideChange",()=>{n.textContent=e.realIndex+1})})(new Swiper(".process__container",{pagination:{el:".process__pagination",type:"bullets"},loop:!0}))})()}(),function(){const e=document.querySelector(".add-model__form"),t=document.querySelector("input[name='email']"),n=document.querySelector(".add-model__email-error"),o=document.querySelector("input[name='brand']"),s=document.querySelector(".add-model__brand-error"),r=document.querySelector("input[name='model']"),a=document.querySelector(".add-model__model-error"),i=document.querySelector("input[type='file']"),d=document.querySelector(".add-model__agreement-input"),l=document.querySelector(".add-model__submit"),c=document.querySelector(".add-model__file-progress"),u=document.querySelector(".add-model__bar-current"),m=document.querySelector(".add-model__file-label"),p=document.querySelector(".add-model__file-wrap"),v=document.querySelector(".add-model__file-result"),_=document.querySelector(".add-model__file-image"),L=document.querySelector(".add-model__file-name"),h=document.querySelector(".add-model__file-close");if(!t)return;function f(e){e.preventDefault(),e.stopPropagation()}function y(e){m.classList.add("highlight")}function w(e){m.classList.remove("highlight")}function f(e){e.preventDefault(),e.stopPropagation()}["dragenter","dragover","dragleave","drop"].forEach(e=>{p.addEventListener(e,f,!1)}),["dragenter","dragover"].forEach(e=>{p.addEventListener(e,y,!1)}),["dragleave","drop"].forEach(e=>{p.addEventListener(e,w,!1)}),p.addEventListener("drop",(function(e){let t=e.dataTransfer.files;i.files&&i.files[0]&&(i.value="",/safari/i.test(navigator.userAgent)||(i.type="",i.type="file"),v.classList.remove("show"),L.textContent="",_.removeAttribute("src"));i.files=t,k()}),!1);const E=(e,t)=>{e.classList.contains(t)||e.classList.add(t)},g=(e,t)=>{e.classList.contains(t)&&e.classList.remove(t)},q=()=>{t.validity.valid&&""!==o.value&&""!==r.value&&d.checked?l.hasAttribute("disabled")&&l.removeAttribute("disabled"):!l.hasAttribute("disabled")&&l.setAttribute("disabled","")},b=e=>{const t=e.target;E(t,"fill"),""===t.value&&E(t,"mask")},S=e=>{const t=e.target;t.value||g(t,"fill"),g(t,"mask")},k=()=>{(e=>{if(e.files&&e.files[0]){var t=new FileReader;t.onloadstart=function(e){c.classList.add("show")},t.onprogress=function(e){console.log(Math.round(e.loaded/e.total*100)),u.style.width=Math.round(e.loaded/e.total*100)+"%"},t.onload=function(t){_.setAttribute("src",t.target.result),L.textContent=e.files[0].name,!v.classList.contains("show")&&v.classList.add("show"),c.classList.remove("show"),u.style.width=0},t.readAsDataURL(e.files[0])}})(i)};t.addEventListener("focus",b),t.addEventListener("blur",S),t.addEventListener("input",e=>{const o=e.target;t.validity.valid||(E(n,"show"),E(t,"error")),t.validity.valid&&(g(o,"error"),g(n,"show")),""===o.value&&E(o,"mask"),""!==o.value&&g(o,"mask"),q()}),o.addEventListener("focus",b),o.addEventListener("blur",S),o.addEventListener("input",e=>{const t=e.target;""===t.value&&(E(t,"mask"),E(t,"error"),E(s,"show")),""!==t.value&&(g(t,"mask"),g(t,"error"),g(s,"show")),q()}),r.addEventListener("focus",b),r.addEventListener("blur",S),r.addEventListener("input",e=>{const t=e.target;""===t.value&&(E(t,"mask"),E(t,"error"),E(a,"show")),""!==t.value&&(g(t,"mask"),g(t,"error"),g(a,"show")),q()}),i.addEventListener("change",k),h.addEventListener("click",()=>{i.value="",/safari/i.test(navigator.userAgent)||(i.type="",i.type="file"),v.classList.remove("show"),L.textContent="",_.removeAttribute("src")}),d.addEventListener("click",()=>{d.checked?g(d,"error"):E(d,"error"),q()}),l.addEventListener("click",t=>{t.preventDefault(),e.submit()})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
