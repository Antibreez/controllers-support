new Swiper(".model__image-container",{pagination:{el:".model__pagination",type:"bullets",clickable:!0},loop:!0}),document.getElementById("animation")&&lottie.loadAnimation({container:document.getElementById("animation"),renderer:"svg",loop:!0,autoplay:!0,path:"data.json"}),function(){var e="https://split.daichicloud.ru/brands/all",t="GET",n=200,o=300,s=function(e,t){var s=new XMLHttpRequest;return s.timeout=1e4,s.responseType="json",s.addEventListener("load",(function(){!function(e){return e.status<n||e.status>o}(s)?e(s.response):t("Данные не загрузились. Причина: "+s.status+" "+s.statusText)})),s.addEventListener("error",(function(){t("Произошла ошибка соединения")})),s.addEventListener("timeout",(function(){t("Запрос не успел выполниться за "+s.timeout+"мс")})),s},i=function(e){e.remove()},a=function(e){var t=document.createElement("div");t.style="z-index: 100; margin: 0 auto; text-align: center; background-color: red;",t.style.position="absolute",t.style.left=0,t.style.right=0,t.style.fontSize="30px",t.textContent=e,document.body.insertAdjacentElement("afterbegin",t),window.setTimeout(i,2e3,t)};window.backend={load:function(n,o){var i=s(n,o||a);i.open(t,e),i.send()}}}(),jQuery,function(){const e=document.querySelector(".model-choice__brand-list"),t=document.querySelector(".model-choice__brand-choice");if(!e)return;t.addEventListener("click",()=>{if(!e.classList.contains("show"))return e.classList.add("show"),void t.classList.add("opened");e.classList.contains("show")&&(e.classList.remove("show"),t.classList.remove("opened"))}),document.addEventListener("mousedown",n=>{let o=n.target;o.classList.contains("model-choice__brand-choice")||o.classList.contains("model-choice__brand-item")||o.classList.contains("model-choice__brand-list")||!e.classList.contains("show")||(e.classList.remove("show"),t.classList.remove("opened"))})}(),function(){const e=document.querySelector(".equipment__wrapper"),t=document.querySelector(".equipment__container");if(!e)return;(()=>{let n=document.createDocumentFragment(),o=e.cloneNode(!0);o.className="equipment__slide-wrapper",o.classList.add("swiper-wrapper");let s=document.createElement("div");s.classList.add("equipment__pagination"),s.classList.add("swiper-pagination"),n.appendChild(o),n.appendChild(s),t.appendChild(n),t.querySelectorAll(".equipment__item").forEach(e=>{e.classList.add("swiper-slide")}),new Swiper(".equipment__container",{pagination:{el:".equipment__pagination",type:"bullets"},loop:!0})})()}(),function(){const e=document.querySelector(".process__wrapper"),t=document.querySelector(".process__container");if(!e)return;(()=>{let n=document.createDocumentFragment(),o=e.cloneNode(!0);o.className="process__slide-wrapper",o.classList.add("swiper-wrapper");let s=document.createElement("div");s.classList.add("process__pagination"),s.classList.add("swiper-pagination");let i=document.createElement("div");i.className="process__number",i.textContent=1,n.appendChild(o),n.appendChild(s),n.appendChild(i),t.appendChild(n),t.querySelectorAll(".process__item").forEach(e=>{e.classList.add("swiper-slide")});(e=>{const n=t.querySelector(".process__number");e.on("slideChange",()=>{n.textContent=e.realIndex+1})})(new Swiper(".process__container",{pagination:{el:".process__pagination",type:"bullets"},loop:!0}))})()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
